name: 构建并推送 Docker 镜像及代理程序

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Tags to push (comma-separated, e.g., latest,v1.0.0)'
        required: true
        default: 'latest'

env:
  IMAGE_NAME: pt-nexus

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 3. 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 4. 登录到 GitHub Container Registry (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 5. 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 6. 准备 Docker 标签
        id: prepare-tags
        run: |
          # 读取用户输入的标签（逗号分隔）
          INPUT_TAGS="${{ github.event.inputs.tags }}"
          
          # 准备两个仓库的完整标签列表
          GHCR_REPO="ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
          DOCKERHUB_REPO="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
          
          # 将逗号分隔的标签转换为完整的镜像标签
          TAGS=""
          IFS=',' read -ra TAG_ARRAY <<< "$INPUT_TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            # 去除首尾空格
            tag=$(echo "$tag" | xargs)
            # 添加两个仓库的标签
            TAGS="${TAGS}${GHCR_REPO}:${tag},"
            TAGS="${TAGS}${DOCKERHUB_REPO}:${tag},"
          done
          
          # 移除最后的逗号
          TAGS="${TAGS%,}"
          
          echo "生成的标签: $TAGS"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: 7. 构建并推送到多个镜像仓库
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prepare-tags.outputs.tags }}

  build-pt-nexus-box-proxy:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: 3. 构建多平台代理程序
        run: |
          cd proxy
          mkdir -p releases

          # 定义要构建的平台
          PLATFORMS=("linux/amd64")

          # 为每个平台构建
          for platform in "${PLATFORMS[@]}"; do
            IFS='/' read -ra ADDR <<< "$platform"
            OS="${ADDR[0]}"
            ARCH="${ADDR[1]}"

            echo "构建平台: $OS/$ARCH"

            # 设置环境变量
            export GOOS=$OS
            export GOARCH=$ARCH
            export CGO_ENABLED=0

            # 设置输出文件名
            if [ "$OS" = "windows" ]; then
              OUTPUT_NAME="pt-nexus-box-proxy-$OS-$ARCH.exe"
            else
              OUTPUT_NAME="pt-nexus-box-proxy-$OS-$ARCH"
            fi

            # 构建
            go build -a -installsuffix cgo -o "releases/$OUTPUT_NAME" .

            # 检查构建是否成功
            if [ $? -ne 0 ]; then
              echo "构建失败: $OS/$ARCH"
              exit 1
            fi

            echo "成功构建: $OUTPUT_NAME"
          done

      - name: 4. 准备 Release 标签
        id: prepare-release-tag
        run: |
          # 从输入的标签中提取第一个作为 release tag
          INPUT_TAGS="${{ github.event.inputs.tags }}"
          FIRST_TAG=$(echo "$INPUT_TAGS" | cut -d',' -f1 | xargs)
          echo "使用的 Release 标签: $FIRST_TAG"
          echo "tag=$FIRST_TAG" >> $GITHUB_OUTPUT

      - name: 5. 创建 Release 并上传二进制文件和安装脚本
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prepare-release-tag.outputs.tag }}
          name: Release ${{ steps.prepare-release-tag.outputs.tag }}
          draft: false
          prerelease: false
          files: |
            proxy/releases/pt-nexus-box-proxy-*
            proxy/install-pt-nexus-box-proxy.sh
